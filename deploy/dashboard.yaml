# Source: polaris/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: polaris
  namespace: dev
  labels:
    app: polaris
---
# Source: polaris/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: polaris
  labels:
    app: polaris
rules:
  # required by controller-runtime code doing a cluster wide lookup
  # when it seems namespace would suffice
  - apiGroups:
      - ''
    resources:
      - 'nodes'
    verbs:
      - 'get'
      - 'list'
---
# Source: polaris/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: polaris
  labels:
    app: polaris
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: polaris
subjects:
  - kind: ServiceAccount
    name: polaris
    namespace: dev
---
# Source: polaris/templates/dashboard.service.yaml
apiVersion: v1
kind: Service
metadata:
  name: polaris-dashboard
  namespace: dev
  labels:
    app: polaris
  annotations:
spec:
  ports:
  - name: http-dashboard
    port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    app: polaris
    component: dashboard
  type: ClusterIP
---
# Source: polaris/templates/dashboard.deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: polaris-dashboard
  namespace: dev
  labels:
    app: polaris
    component: dashboard
spec:
  replicas: 1
  selector:
    matchLabels:
      app: polaris
      component: dashboard
  template:
    metadata:
      labels:
        app: polaris
        component: dashboard
    spec:
      containers:
      - command:
        - polaris
        - dashboard
        - --port
        - "8080"
        image: 'shashikumar09/polaris:92012'
        imagePullPolicy: 'Always'
        name: dashboard
        ports:
        - containerPort: 8080
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 20
        
        env:
          - name: DD_CLIENT_API_KEY
            value: a4748ca0ec3a1f251d9df8b9a749291a
          - name: DD_CLIENT_APP_KEY
            value: c2543df1c10112e56b1403f35bdf9b2618156b24
          - name: MACHINE_STABILITY
            value: uat
        resources:
          limits:
            cpu: 140m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 128Mi
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          capabilities:
            drop:
              - ALL
        volumeMounts:
          - name: polaris-config
            mountPath: /data/config/
      volumes:
        - name: polaris-config
          configMap:
            name: polaris
      topologySpreadConstraints:
      - labelSelector:
          matchLabels:
            app.kubernetes.io/name: uds
        maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway
      serviceAccountName: polaris
      nodeSelector:
      tolerations:
